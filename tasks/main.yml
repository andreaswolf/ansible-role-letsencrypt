---

#################################################
# one time setup
#################################################

- name: create data directory
  file:
    path: '{{ acme_tiny_data_directory }}'
    state: directory

- name: create csr directory
  file:
    path: '{{ acme_tiny_data_directory }}/csrs'
    state: directory

- name: create user
  user:
    name: '{{ letsencrypt_user }}'
    home: '{{ acme_tiny_data_directory }}'
    system: yes

- name: create group
  group:
    name: '{{ letsencrypt_group }}'
    system: yes

- name: create program directory
  file:
    path: '{{ acme_tiny_software_directory }}'
    state: directory

- name: create challenges directory
  file:
    path: '{{ acme_tiny_challenges_directory }}'
    state: directory
    owner: '{{ letsencrypt_user }}'
    group: '{{ letsencrypt_group }}'

- name: ensure correct permissions on data directory
  file:
    path: '{{ acme_tiny_data_directory }}'
    state: directory
    mode: 0700
    owner: '{{ letsencrypt_user }}'
    group: '{{ letsencrypt_group }}'
    recurse: true

- name: clone acme-tiny repository
  git:
    dest: '{{ acme_tiny_software_directory }}'
    repo: '{{ acme_tiny_repo }}'
    version: '{{ acme_tiny_commit }}'
    accept_hostkey: yes

- name: generate account key
  shell: >
    openssl genrsa 4096 > {{ letsencrypt_account_key }}
  args:
    creates: "{{ letsencrypt_account_key }}"
  register: generate_account_key

- name: print account public key
  command: >
    openssl rsa -in {{ letsencrypt_account_key }} -pubout
  register: account_public_key
  when: generate_account_key | changed

- name: "Please register the account public key with Letsencrypt, using for example https://gethttpsforfree.com/"
  debug: var=account_public_key.stdout
  when: generate_account_key | changed


- name: generate certificate renewal script
  template:
    src: renew-certs.py
    dest: "{{ acme_tiny_data_directory }}/renew-certs.py"
    mode: 0700
    owner: '{{ letsencrypt_user }}'
    group: '{{ letsencrypt_group }}'

#################################################
# key setup

- name: generate private keys
  shell: >
    openssl genrsa 4096 > {{ item.keypath }}
  args:
    creates: "{{ item.keypath }}"
  with_items: letsencrypt_certs
  tags: ['letsencrypt_keys']

# todo this leaves a very very tiny timeframe where the keys are potentially not secured; this is only relevant if the
# folder containing the keys is not properly secured (i.e. only readable by root)
- name: ensure correct permissions on private keys
  file: >
    path={{ item.keypath }}
    owner={{ item.key_owner|default('root') }} group={{ item.key_group|default('root') }}
    mode={{ item.key_permissions|default('0600') }}
  with_items: letsencrypt_certs
  tags: ['letsencrypt_keys']

- name: generate csrs for single domain keys
  shell: >
    openssl req -new -sha256 -key '{{ item.keypath }}' -subj '/CN={{ item.host }}' > {{ acme_tiny_data_directory }}/csrs/{{ item.name }}.csr
  args:
    creates: "{{ acme_tiny_data_directory }}/csrs/{{ item.name }}.csr"
  when: item.host is string
  with_items: letsencrypt_certs

- name: generate csrs for multi domain keys
  shell: "openssl req -new -sha256 -key '{{ item.keypath }}' -subj '/' -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf '[SAN]\nsubjectAltName=DNS:{{ item.host|join(',DNS:') }}')) > {{ acme_tiny_data_directory }}/csrs/{{ item.name }}.csr"
  args:
    # we must use bash here because dash (default on Debian) throws an error "unexpected ( on line 1"
    executable: "/bin/bash"
    creates: "{{ acme_tiny_data_directory }}/csrs/{{ item.name }}.csr"
  when: item.host is not string
  with_items: letsencrypt_certs
  tags: letsencrypt

- name: generate the initial certificate
  command: ./renew-certs.py
  args:
    chdir: "{{ acme_tiny_data_directory }}"
    creates: "{{ letsencrypt_certs[0].certpath }}"
  become_user: "{{ letsencrypt_user }}"
  register: generate_initial_cert
  failed_when: "'error' in generate_initial_cert.stdout"

#################################################
# cron setup

- name: install cronjob for key generation
  cron:
    job: "cd {{ acme_tiny_data_directory }} && ./renew-certs.py"
    # run the job every month so we get a new certificate in time, even if it fails on the first attempt
    day: 1
    hour: 4
    minute: 30
    state: present
    name: "letsencrypt certificate renewal"
    user: "{{ letsencrypt_user }}"

...t

- name: generate private keys
  shell: "openssl genrsa 4096 > {{ item.keypath }}"
  args:
    creates: "{{ item.keypath }}"
  with_items: letsencrypt_certs
  tags: letsencrypt

- name: generate csrs for singledomain keys
  shell: "openssl req -new -sha256 -key '{{ item.keypath }}' -subj '/CN={{ item.host }}'
    > {{ acme_tiny_data_directory }}/csrs/{{ item.name }}.csr"
  args:
    creates: "{{ acme_tiny_data_directory }}/csrs/{{ item.name }}.csr"
  when: not {{ item.multiple|default(false) }}
  with_items: letsencrypt_certs
  tags: letsencrypt
  # notify: generate certs

- name: generate csrs for multidomain keys
  raw: "openssl req -new -sha256 -key '{{ item.keypath }}' -subj '/' -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf '[SAN]\nsubjectAltName=DNS:{{ item.hosts|join(',DNS:') }}')) > {{ acme_tiny_data_directory }}/csrs/{{ item.name }}.csr"
  args:
    creates: "{{ acme_tiny_data_directory }}/csrs/{{ item.name }}.csr"
  when: item.multiple|default(false)
  with_items: letsencrypt_certs
  tags: letsencrypt
  # notify: generate certs

#################################################
# cron setup

- name: install cronjob for key generation
  cron:
    job: "cd {{ acme_tiny_data_directory }} && ./renew-certs.py"
    # run the job every week so we get a new certificate in time, even if it fails on the first attempt
    special_time: weekly
    cron_file: letsencrypt
    state: present
    name: "letsencrypt certificate renewal"
    user: "{{ letsencrypt_user }}"
  tags: letsencrypt

...
